import socket
import threading

# 定义一个类封装元组空间服务器的功能
class TupleSpaceServer:
    def __init__(self):
        self.tuple_space = {}         # 存储键值对
        self.lock = threading.Lock()  # 用于线程安全访问

    def handle(self, conn, addr):
        print(f"[+] Client connected: {addr}")
        try:
            while True:
                data = conn.recv(1024).decode()
                if not data:
                    break
                parts = data.strip().split(' ', 2)
                if len(parts) < 2:
                    self.send(conn, "ERR invalid format")
                    continue
                cmd = parts[1]
                content = parts[2] if len(parts) > 2 else ""
                response = self.process_command(cmd, content)
                self.send(conn, response)
        except Exception as e:
            print(f"[!] Error with {addr}: {e}")
        finally:
            conn.close()
            print(f"[-] Disconnected: {addr}")

    def send(self, conn, message):
        length = len(message) + 4
        conn.send(f"{str(length).zfill(3)} {message}".encode())

    def process_command(self, cmd, content):
        if cmd == 'P':
            if ' ' not in content:
                return "ERR invalid PUT format"
            key, value = content.split(' ', 1)
            return self.put(key, value)
        elif cmd == 'G':
            return self.get(content)
        elif cmd == 'R':
            return self.read(content)
        else:
            return "ERR unknown command"

    def put(self, key, value):
        with self.lock:
            if key in self.tuple_space:
                return f"ERR {key} already exists"
            self.tuple_space[key] = value
            return f"OK ({key}, {value}) added"

    def get(self, key):
        with self.lock:
            if key in self.tuple_space:
                val = self.tuple_space.pop(key)
                return f"OK ({key}, {val}) removed"
            return f"ERR {key} does not exist"

    def read(self, key):
        with self.lock:
            if key in self.tuple_space:
                return f"OK ({key}, {self.tuple_space[key]}) read"
            return f"ERR {key} does not exist"
